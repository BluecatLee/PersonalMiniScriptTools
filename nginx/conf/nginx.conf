user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {

        client_max_body_size       20m;
        client_body_buffer_size    128k;
        client_header_buffer_size  32k;

        proxy_set_header  Host $host;
        proxy_set_header  X-Real-IP $remote_addr;
        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_connect_timeout  300;
        proxy_read_timeout     300;
        proxy_send_timeout     300;
        keepalive_timeout      120;

        proxy_buffers            4 32k;
        proxy_buffer_size        4k;
        proxy_busy_buffers_size  64k;

    
	# header中允许key的名字带下划线
	underscores_in_headers on;


        log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        log_format  json     '{"@timestamp":"$time_iso8601",'
                             '"host":"$server_addr",'
                             '"clientip":"$remote_addr",'
                             '"size":$body_bytes_sent,'
                             '"responsetime":$request_time,'
                             '"upstreamtime":"$upstream_response_time",'
                             '"upstreamhost":"$upstream_addr",'
                             '"http_host":"$host",'
                             '"url":"$uri",'
                             '"referer":"$http_referer",'
                             '"agent":"$http_user_agent",'
                             '"status":"$status"}';

        access_log  /var/log/nginx/access.log  ;

        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        types_hash_max_size 2048;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;


        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 128k;

        gzip on;
        gzip_min_length 1k;
        gzip_buffers 4 16k;
        gzip_http_version 1.0;
        gzip_comp_level 2;
        gzip_types text/plain application/x-javascript text/css application/xml;
        gzip_vary on;

    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/conf.d/vhost/*.conf;

    server {
        listen       80 default_server;
        listen       [::]:80 default_server;
        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers HIGH:!aNULL:!MD5;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }


	# a pro demo
	server {
		listen 443;
		server_name bluecatlee.com;

		ssl on;
		ssl_certificate "/xx.cer";
		ssl_certificate_key "/xx.key";
		ssl_session_timeout  5m;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;
		ssl_prefer_server_ciphers on;
		
		# return demo
		location /return {
			default_type application/json;
			return 405 '{"code":"K-111000","message":"system updating..."}';
        	}
		
		# rewrite demo
		location / {
                	rewrite / /index.html break;
        	}
		
		# security demo
		location /list {
			
			####跨域####
			# 设置服务器可以接受的请求源, *表示设置所有域都可以访问			
			add_header Access-Control-Allow-Origin *;
			
			# CORS标准规定会产生"副作用"的方法需要客户端发送预检请求(preflight request) 服务器响应允许之后才发起实际的HTTP请求
			# GET方法一般不会产生副作用 因为只做查询
			# Content-Type不属于application/x-www-form-urlencoded、multipart/form-data、text/plain的都需要发送预检请求
			# 带特殊MIME类型(包括application/json)的POST方法需要跨域时需要发送预检请求
			# 发送预检请求时会使用OPTIONS方法 设置允许该方法
			add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
			
			# 设置Access-Control-Allow-Headers头 包含Content-Type值表示允许非默认的Content-Type
			add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
			# 放行预检请求用到的OPTIONS方法
			if ($request_method = 'OPTIONS') {
			   return 204;
			}
			############
			
			proxy_pass http://127.0.0.1:11000;
			allow 127.0.0.1;
			deny all;
        }
		
		# visit file demo
		location /file {
		        #列出目录
			#autoindex on;
			root /data/file;
		}
		
		# load balance
		location /serviceA {
		
			upstream serviceA {
				server 127.0.0.1:12000 weight=1;
				server 127.0.0.1:12001 weight=1;
			}
		
			proxy_pass http://serviceA;
		}
		
		location / {
			sub_filter
			sub_filter_once off;
		}
		
		# 设置请求头
		location /head {
			# 设置请求头 会覆盖 add_header不会
			# Http 头部key不区分大小写
			# 如果某个请求头的值为空，那么这个请求头将不会传送给后端服务器
			
			#默认设置
			#proxy_set_header Host $proxy_host;   #Host设置为代理机器的Host 即nginx所在机器的Host
			#proxy_set_header Connection close;   #Connection close 请求响应完成时 关闭tcp连接 有利于处理高并发
			
			# 不改变原host 
			#proxy_set_header Host $http_host;		 	#如果原请求没有Host 则传给后端服务器的时候也不会有Host
			proxy_set_header Host $host; 				#$host：原请求头包含Host时，$host即为这个值；如果不包含 则为虚拟主机的主域名
			#proxy_set_header Host $host:$proxy_port; 	#端口可以一起传送
			
			#proxy_set_header Referer 'http://www.baidu.com';   #设置referer
			
			#proxy_set_header X-Forwarded-Host $host;
        	#proxy_set_header X-Forwarded-Server $host;
        	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #将$remote_address变量追加在X-Forwarded-For请求头。
																		 #$remote_address是上一环请求的真实ip
																		 #X-Forwarded-For表示请求经过的机器的ip列表，包括原始ip。X-Real-IP是上一环请求的真实ip
			
		}
		
		location /web-socket {
			# 代理websocket需要设置Upgrade和Connection头
			proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
			proxy_pass http://127.0.0.1:9999;
		}
		
	}	

}

# 普通的nginx反向代理是第七层代理，而stream模块是第四层代理，转发的tcp/ip协议，所以不需要证书。
stream {

	upstream serviceB {
		hash $remote_addr consistent;
		server 127.0.0.1:12002 weight=5 max_fails=3 fail_timeout=30s;
	}	
	
	server {
		listen 12002;
		proxy_connect_timeout 10s;
        proxy_timeout 300s;
        proxy_pass serviceB;
	}
	
}